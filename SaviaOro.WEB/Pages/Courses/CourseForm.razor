<EditForm Model="Course" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-file"></i> @(Course.Id > 0 ? "Editar curso" : "Nuevo curso")
            </span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                </div>
                <div class="col-md-9">
                    <div class="mb-3">
                        <label>Título:</label>
                        <div>
                            <InputText class="form-control form-control-sm" @bind-Value="@Course.Title" />
                            <ValidationMessage For="@(() => Course.Title)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Descripción corta:</label>
                        <div>
                            <InputText class="form-control form-control-sm" @bind-Value="@Course.ShortDescription" />
                            <ValidationMessage For="@(() => Course.ShortDescription)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Descripción larga:</label>
                        <div>
                            <InputText class="form-control form-control-sm" @bind-Value="@Course.LargeDescription" />
                            <ValidationMessage For="@(() => Course.LargeDescription)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer text-center">
            <button class="btn btn-primary btn-sm" type="submit">Guardar Cambios</button>
            <button class="btn btn-success btn-sm" @onclick="ReturnAction">Volver</button>
        </div>
    </div>

</EditForm>

@code {
    private string imageUrl;

    [EditorRequired]
    [Parameter]
    public Course Course { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        imageUrl = Course.PhotoFullPath;
        Course.Photo = null;
    }

    private void ImageSelected(string imagenBase64)
    {
        Course.Photo = imagenBase64;
        imageUrl = null;
    }
}
