@page "/courses"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (Courses is null)
{
    <Loading/>
}
else
{    
    <div class="row row-cols-1 row-cols-md-4 g-4">
        @foreach (var course in Courses!)
        {
            <div class="col mb-4">
                <div class="card h-100">
                <img src="@course.PhotoFullPath" class="card-img-top" style="max-height: 350px"/>
                    <div class="card-body">
                        <h5 class="card-title">@course.Title</h5>
                        <p class="card-text">
                            @course.LargeDescription
                        </p>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">
                            Creado @course.CreationDate!.Value.ToLocalTime().ToShortDateString()
                            <br/>
                            <a href="/course/edit/@course.Id" class="btn btn-warning btn-sm">Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(course))>Borrar</button>
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    public List<Course>? Courses { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHppt = await repository.GetAsync<List<Course>>("api/courses");
        Courses = responseHppt.Response!;
    }

    private async Task DeleteAsync(Course course)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres borrar el curso {course.Title}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/courses/{course.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/courses");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

}
