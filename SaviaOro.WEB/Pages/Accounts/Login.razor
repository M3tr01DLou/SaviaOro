@page "/accounts/login"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<div class="contact">
    <EditForm Model="loginDTO" OnValidSubmit="LoginAsync" class="php-email-form">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-12">
                <div class="mb-3">
                    <label>Email:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@loginDTO.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => loginDTO.Email)" />
                    </div>
                </div>
                <div class="mb-3">
                    <label>Contraseña:</label>
                    <div>
                        <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => loginDTO.Password)" />
                    </div>
                </div>
                <button class="btn btn-primary" type="submit">Iniciar Sesión</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        await BlazoredModal.CloseAsync(ModalResult.Ok());
        navigationManager.NavigateTo("/");
    }
}
