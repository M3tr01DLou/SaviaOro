@page "/accounts/login"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService


    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-backdrop fade show" @onclick="Cancel"></div>
        <div class="modal-dialog" style="z-index: 1050">              
            <div class="modal-content">
                <div class="contact">
                    <EditForm Model="loginDTO" OnValidSubmit="LoginAsync" class="php-email-form">
                        <DataAnnotationsValidator />
                        <div class="modal-header">
                            <h5 class="modal-title">@Title</h5>
                            <button type="button" class="btn-close" aria-label="Close" @onclick="Close">
                            </button>
                        </div>
                        <div class="modal-body">
                            @if (IsLoading)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status"/>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-12">
                                        <div class="mb-3">
                                            <label>Email:</label>
                                            <div>
                                                <InputText class="form-control" @bind-Value="@loginDTO.Email" placeholder="Enter your email" />
                                                <ValidationMessage For="@(() => loginDTO.Email)" />
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label>Contraseña:</label>
                                            <div>
                                                <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" placeholder="Enter your password" />
                                                <ValidationMessage For="@(() => loginDTO.Password)" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer align-items-center">
                            <button class="btn btn-primary" type="submit">Iniciar Sesión</button>
                        </div>
                        </EditForm>
                </div>
            </div>
        </div>
    </div>


@code {
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] 
    public string? Title { get; set; }

    private LoginDTO loginDTO = new();

    public bool IsLoading { get; set; } = false;

    private async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    private async Task Cancel() => await BlazoredModal.CancelAsync();

    private async Task LoginAsync()
    {
        IsLoading = true;
        var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        IsLoading = false;
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        await Close();
        navigationManager.NavigateTo("/");
    }
}
